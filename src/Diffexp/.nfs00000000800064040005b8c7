#!/usr/bin/env Rscript
# Created by: mhan
# Created on: 18-8-29
# Updated on: 19-6-25
# this script is used to visualize the gene expression in different plot sepecified by the user.
# the supported visualization types can be as follows:
# tSNE plot: as featureplot on the command line
# violin plot: as marker_gene_violin_plot
# heatmap:
# featuregroup
#
rm(list=ls())

#=================================================================================
# customized function definition
#=================================================================================

suppressPackageStartupMessages( library("Seurat") )
suppressPackageStartupMessages( library("optparse") )
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("gridExtra"))
suppressPackageStartupMessages(library("OESingleCell"))

#=command line parameters setting=============================
option_list = list(
    make_option( c("--RDS", "-v"), type = "character", default = "TRUE",
                 help = "the seurat object saved as R object in RDS format."),
    make_option( c("--markers","-l"), type ="character",
                help="the list file of marker genes to be visulized."),
    make_option( c("--output","-o"),type="character", default = "./",
                help="the output directory of results.", metavar="character"),
    make_option( c("--topn", "-n"), type="integer", default = 1,
                 help = "the number of top markers for each cluster to visualizse."),
    make_option( c("--topby", "-c"), type = "character", default = "avg_LogFC",
                 help="the column used to pick top n marker gene to visulize.The
                 option can be one of the column in the input marker genes table."),
    make_option( c("--extraGene", "-x"), type = "character", default = NULL,
                 help = "[OPTIONAL]The extra gene list of interest to visualize specified by the user."),
    make_option( c("--groupby", "-g"), type = "character", default = "clusters",
                help = "[OPTIONAL]The grouppinig variable in the metadata for
                        separate the cells to visulize marker genes."),
    make_option( c("--splitby", "-y"), type = "character", default = NULL,
                help = "[OPTIONAL]The variable in the metadata used to split the graph by the variable levels to
                        comparing the gene expression difference in different levels."),
    make_option( c("--pointsize", "-s"), type = "double", default = 1,
        help = "[OPTIONAL]the point size in the plot."),
    make_option( c("--alpha2use", "-a"), type = "double", default = 0,
        help = "[OPTIONAL]the opacity of the pooints on the violin plot."),
    make_option( c("--array2use", "-e"), type = "character", default = "RNA",
        help = "[OPTIONAL]the array result to use in case of multimodal analysis."),
    make_option( c("--vismethod","-m"), type= "character",default="vlnplot,featureplot",
                 help = "the visulization methods for the marker genes of each cell cluster.
                 he methods can be ridgeplot,vlnplot,dotplot,featureplot,heatmap,featurebygroup."),
    make_option( c("--var2use", "-q" ), type = "character", default = NULL,
                help = "[OPTIONAL]The column name in cell metadata used as identity
                        of each cell combined with which_cell."),
    make_option( c("--levels4var", "-u" ), type = "character", default = NULL,
                help = "[OPTIONAL] subset of factor levels for the specified factor by --var2use.")
    );
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

#=================================================================================
#parse the command line parameters
#=================================================================================
array2use = opt$array2use
if ( is.null(opt$RDS) ){
    stop("the seurat object is NOT AVAILABLE!")
}else{
    seurat_ob = readRDS(opt$RDS)
    if ( seurat_ob@version < 3){
        seurat_ob = UpdateSeuratObject(seurat_ob) #make sure the seurat object match with the latest seurat package
    }
    metadata = seurat_ob@meta.data
    if ( is.null(metadata$clusters) ){
        seurat_ob = StashIdent(seurat_ob, save.name = "clusters")
    }else{
        # if it is the first time to run this script on a seurat object, the
        # clusters here is actually the sample index but cell cluster ids.
        # After running this script, the cluster id will be overwrite with
        # the actual cell cluster id.
        seurat_ob = SetIdent( seurat_ob, value = "clusters")
    }
}

#get the subset of cells used for visualization if necessay
if ( !is.null(opt$which_cells)){
    if ( is.null(opt$ident2use ) ){
        print("NO cell identity column name AVAILABLE! The clusters column will be used as default.")
        ident2use = "clusters"
    }else{
        ident2use = opt$ident2use
    }
    cluster_list = unlist(strsplit( opt$which_cells,",",perl = T))
    seurat_ob = SubsetData( seurat_ob, subset.name = ident2use, accept.value = cluster_list)
}

# output directory setting
if ( is.null(opt$output) ){
    print("NO output directory specified,the current directory will be used!")
    root_dir = getwd()
}else{
    if ( file.exists(opt$output)){
        root_dir = opt$output
    }else{
        root_dir = opt$output
        dir.create(root_dir)
    }
}

if ( is.null( opt$groupby ) ){
    print( "NO groupping variable AVAILABLE for cell groupping! The default cell clusters id will be used!")
    groupby = "clusters"
}else{
    groupby = opt$groupby
}

if ( !is.null( opt$splitby ) ){
    splitby = opt$splitby
    if ( splitby == groupby ){
        stop( "The variable specified by --splitby conflicted with the --groupby parameter, NULL will be used! ")
        splitby = NULL
    }
}

if ( is.null( opt$markers ) & is.null(opt$extraGene)){
    stop("NO marker genes is AVAILABLE!")
}

topn_markers = data.frame()
if ( !is.null(opt$markers) ){
    markers2vis = read.table(  opt$markers, sep="\t", header = T)
    topn_markers  = markers2vis %>% group_by(cluster) %>%
        arrange(p_val,desc(avg_logFC),desc(gene_diff)) %>%
        top_n(opt$topn,opt$topby) %>% arrange(cluster) %>% select(cluster,gene)
}
if ( !is.null(opt$extraGene) ){
    extra_gene = read.table(  opt$extraGene, sep="\t", header = T)
    # validate the gene symbol to be the same in the data
    #calibrate the gene symbol using the genes in the object in case
    # of the case difference in the gene symbol strings
    formated_extra_gene = CaseMatch(search = as.vector(extra_gene$gene),
                            match = rownames(seurat_ob))
    # formated_extra_gene = gene4data[unlist(lapply( as.vector(extra_gene$gene),
    #         function(x)grep(paste0("^",x,"$"),gene4data, perl = T, ignore.case = T)))]
    formated_extra_gene = data.frame( cluster = rep(c("extra"), length(formated_extra_gene)),
                                        gene = formated_extra_gene)
    topn_markers = rbind(topn_markers, formated_extra_gene)
}

if ( is.null(opt$vismethod) ){
    print("NO marker gene visulization method provided,the default method vlnplot and featureplot will be used!")
    vismethods = c("vlnplot","featureplot")
}else if( opt$vismethod == "all" ){
    vismethods = c("vlnplot","featureplot","ridgeplot","dotplot","heatmap", "violinEnsemble")
}else{
    vismethods = unlist(strsplit(opt$vismethod,","))
}

#=================================================================================
# visualize the markers in different ways
#=================================================================================
for ( vismethod in vismethods ){
    if ( vismethod == "vlnplot" ){
        # Draws a violin plot of single cell data (gene expression, metrics, PC scores, etc.)

        for ( clusterx in unique(topn_markers$cluster) ){
            topn = topn_markers %>% filter( cluster == clusterx) %>% select(cluster,gene)
            topn_markers2vis = as.vector(topn$gene)

            path4vis = file.path(root_dir,paste0("markers_vis4cluster",clusterx,collapse = ""))
            if ( file.exists( path4vis ) ){
                output_dir = path4vis
            }else{
                output_dir = path4vis
                dir.create(output_dir)
            }

            colors2use = CustomCol(1:length(unique(seurat_ob@meta.data[,group.by])))
            gs = lapply(topn_markers2vis, function(x) VlnPlot(seurat_ob, features = x, cols = colors2use,x.lab.rot = T,
                                                            pt.size = opt$pointsize, alpha = opt$alpha2use,
                                                            assay = array2use, group.by = groupby, split.by = splitby)+
                                                      labs(title = "",y = x) + 
                                                      theme(legend.position = "none", 
                                                            # panel.spacing = unit(.05, "lines"),
                                                            axis.title.x = element_text(size = 0),
                                                            axis.title.y = element_text(size = 8),
                                                            axis.text.y=element_text(size = 4)))
            pdf(file.path(output_dir,paste0("top", "marker_gene_violin_plot.pdf", collapse = "_")),
                            width = 8, height = length(topn_markers2vis)*2)
            grid.arrange(grobs = gs, ncol=1)
            dev.off()
            png(file.path(output_dir,paste0("top","marker_gene_violin_plot.png", collapse = "_")),
                            width = 800,height = length(topn_markers2vis)*120)
            grid.arrange(grobs = gs, ncol=1)
            dev.off()
        }
    }

    if ( vismethod == "featureplot" ){
        for ( clusterx in unique(topn_markers$cluster) ){
            topn = topn_markers %>% filter( cluster == clusterx) %>% select(cluster,gene)
            topn_markers2vis = as.vector(topn$gene)

            path4vis = file.path(root_dir,paste0("markers_vis4cluster",clusterx,collapse = ""))
            if ( file.exists( path4vis ) ){
                output_dir = path4vis
            }else{
                output_dir = path4vis
                dir.create(output_dir)
            }

            pdf(file.path(output_dir,paste0("top", "marker_gene_featureplot.pdf", collapse = "_")),
                                            width = 12, height = length(topn_markers2vis)*2)
            FeaturePlot(seurat_ob,features = topn_markers2vis,cols = c("grey","red"), group.by = groupby,
                        split.by = splitby, reduction= reduct.use, nCol = 2, pt.size = opt$pointsize)
            dev.off()
            png(file.path(output_dir,paste0("top","marker_gene_featureplot.png", collapse = "_")),
                                width = 800,height = length(topn_markers2vis)*220)
            FeaturePlot(seurat_ob,features.plot = topn_markers2vis,
                        cols.use = c("grey","red"), assay = array2use,
                            nCol = 2,pt.size = opt$pointsize, no.legend=F)
            dev.off()
        }
    }

    if ( vismethod == "dotplot" ){
        seurat_ob = SetIdent( seurat_ob, value = groupby )
        markers2vis4dotplot = unique(as.vector(topn_markers$gene))
        seurat_ob = SetIdent( seurat_ob, value = groupby )
        DotPlot(object = seurat_ob, genes.plot = markers2vis4dotplot,
                plot.legend = T,x.lab.rot = T) + RotatedAxis()
        ggsave(file.path(root_dir,paste0("top", "marker_gene_dotplot.pdf", collapse = "_")))
        ggsave(file.path(root_dir,paste0("top", "marker_gene_dotplot.png", collapse = "_")),dpi = 1000 ,limitsize = F )
    }

    if ( vismethod == "ridgeplot"){
        for ( clusterx in unique(topn_markers$cluster) ){
            topn = topn_markers %>% filter( cluster == clusterx) %>% select(cluster,gene)
            topn_markers2vis = as.vector(topn$gene)
            colors2use = CustomCol(1:length(unique(seurat_ob@meta.data[,group.by])))

            path4vis = file.path(root_dir,paste0("markers_vis4cluster",clusterx,collapse = ""))
            if ( file.exists( path4vis ) ){
                output_dir = path4vis
            }else{
                output_dir = path4vis
                dir.create(output_dir)
            }
            seurat_ob = SeIdent( seurat_ob, value = groupby )
            RidgePlot( object = seurat_ob, features = topn_markers2vis,
                        assay = array2use, cols = colors2use, nCol = 3)
            ggsave(file.path(output_dir,paste0( "top", "marker_gene_ridgeplot.pdf",collapse = "_" )))
            ggsave(file.path(output_dir,paste0( "top", "marker_gene_ridgeplot.png", collapse = "_")),dpi = 1000 ,limitsize = F)
        }
    }

    if ( vismethod == "violinensemble"){
        colors2use = CustomCol(1:length(unique(seurat_ob@meta.data[,group.by])))
        ggensemble = ViolinEnsemble( object =  seurat_ob, features = topn_markers2vis, cols = colors2use,
                                        group.by = groupby, show_point = T, pt_size = opt$pointsize,
                                        slot = slot2use,assay = array2use)
        ggsave(file.path(output_dir,paste0( "all_top", "marker_gene_enhanced_violin_plot.pdf",collapse = "_" )))
        ggsave(file.path(output_dir,paste0( "all_top", "marker_gene_enhanced_ciolin_plot.png", collapse = "_")),
                    dpi = 1000 ,limitsize = F)
        # for ( clusterx in unique(topn_markers$cluster) ){
        #     topn = topn_markers %>% filter( cluster == clusterx) %>% select(cluster,gene)
        #     topn_markers2vis = as.vector(topn$gene)
        # 
        #     path4vis = file.path(root_dir,paste0("markers_vis4cluster",clusterx,collapse = ""))
        #     if ( file.exists( path4vis ) ){
        #         output_dir = path4vis
        #     }else{
        #         output_dir = path4vis
        #         dir.create(output_dir)
        #     }
        #     ggensemble = violinEnsemble( object =  seurat_ob, genes = topn_markers2vis,
        #                                 group_var = groupby,
        #                                 slot_use = slot2use,assay_use = "RNA")
        #     ggsave(file.path(output_dir,paste0( "top", "marker_gene_enhanced_violin_plot.pdf",collapse = "_" )))
        #     ggsave(file.path(output_dir,paste0( "top", "marker_gene_enhanced_ciolin_plot.png", collapse = "_")),
        #                     dpi = 1000 ,limitsize = F)
        # }
    }

    if ( vismethod == "heatmap" ){
        markers2vis4heatmap = unique(as.vector(topn_markers$gene))
        if ( is.null(opt$sample_ratio) ){
            subseted_seurat = seurat_ob
        }else{
            sampled_cellmeta = seurat_ob@meta.data %>% 
                                group_by( groupby ) %>% 
                                sample_frac( size = opt$sample_ratio,replace = F)
            subseted_seurat = SubsetData(seurat_ob, cells = rownames(sampled_cellmeta))
        }
        colors2use = CustomCol(1:length(unique(seurat_ob@meta.data[,group.by])))
        ggheat = DoHeatmap( object = subseted_seurat,
                            features = markers2vis4heatmap,
                            group.by = groupby, array = array2use,
                            slot = slot2use, assay = "RNA",
                            group.bar = T, size=4) +
                            theme(axis.text.y = element_text(size = 4))
                            # group.cex = 10, cex.row = 4,
                            # slim.col.label = T, group.label.rot = F)
        ggheat +  guides(fill = guide_colorbar( title.position = "top"))
        ggsave(file.path(root_dir,paste0("top","marker_gene_heatmap.pdf", collapse = "_")))
        ggsave(file.path(root_dir, paste0("top", "marker_gene_heatmap.png", collapse = "_")), dpi = 1000 ,limitsize = F)
    }
}
